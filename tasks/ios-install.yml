---
- name: Verify image version in network_image_map
  assert:
    that:
      - "network_image_map[device_required_software] is defined"
      - "network_image_map[device_required_software].system_image_url is defined"
    msg: "{{ device_required_software }} is not in network_image_map"

- name: Setting system image filename
  set_fact:
    system_image_filename: "{{ network_image_map[device_required_software].system_image_url.split('/')[-1] }}"

- block:
  - name: Deactivate current image {{ device_required_software }}
    ios_config:
      lines:
        - "no boot system switch all flash:{{ device_system_image }}"
    register: image_activate

  - name: Activate image {{ device_required_software }}
    ios_config:
      lines:
        - "boot system switch all flash:{{ system_image_filename }}"
      save_when: changed
    register: image_activate

  - name: Reload the Switch
    ios_command:
      commands:
        - command: reload
          prompt: Proceed with reload?
          answer: y
    when: image_activate.changed
  when: stack_install_mode == 'BUNDLE'

- block:
  # - name: Add image {{ system_image_filename }}
  #   ios_command:
  #     commands:
  #       - command: "install add file flash:{{ system_image_filename }}"
  #         prompt: save configuration
  #         answer: y
  #   register: upgrade_results

  - name: Installing image {{ system_image_filename }}
    ios_command:
      commands:
        - command: "request platform software package install switch all file flash:{{ system_image_filename }} retain-source-file new auto-copy"
          prompt: save configuration
          answer: y
    register: upgrade_results
    failed_when: "'FAILED' in upgrade_results.stdout"

  - debug: var=upgrade_results.stdout

  - debug: var=upgrade_results.stdout
    when: "'FAILED' in upgrade_results.stdout"

  - name: Reloading the Switch
    ios_command:
      commands:
        - command: reload
          prompt: Save?
          answer: "yes\r\r"

  # - name: Activate image {{ system_image_filename }}
  #   ios_command:
  #     commands:
  #       - command: "install activate"
  #         prompt: reload
  #         answer: yes
  #   register: upgrade_results
  when: stack_install_mode == 'INSTALL'

- name: Reset the persitent SSH connection
  meta: reset_connection

- name: Wait for device to come back up
  wait_for:
    port: 22
    timeout: 1800
    host: "{{ ansible_host }}"
    delay: 600
  delegate_to: localhost

- name: Get switch information
  ios_command:
    commands:
      - show version
  register: command_output
  retries: 6
  delay: 10

- name: Parse the command output
  set_fact:
    version_data: "{{ command_output.stdout[0] | parse_cli_textfsm(version_template) }}"

- assert:
    that:
      - version_data[0].VERSION == device_required_version
    msg: "Device is running {{ version_data[0].VERSION }}, not {{ device_required_version }}"